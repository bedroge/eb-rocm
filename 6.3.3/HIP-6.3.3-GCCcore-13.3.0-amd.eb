easyblock = 'Bundle'

name = 'HIP'
_rocm_version = '6.3.3'
version = _rocm_version
versionsuffix = '-amd'

homepage = 'https://github.com/ROCm/HIP'
description = """HIP is a C++ Runtime API and Kernel Language that allows
developers to create portable applications for AMD and NVIDIA GPUs from single
source code."""
docurls = ['https://rocmdocs.amd.com/projects/HIP/']

toolchain = {'name': 'GCCcore', 'version': '13.3.0'}

builddependencies = [
    ('binutils', '2.42'),
    ('CMake', '3.29.3'),
    ('CppHeaderParser', '2.7.4'),
]

dependencies = [
    ('zlib', '1.3.1'),
    ('libxml2', '2.12.7'),
    ('numactl', '2.0.18'),
    ('Perl', '5.38.2'),
    ('libglvnd', '1.7.0'),
    ('ROCm-LLVM', '%(version)s'),
    ('rocm-cmake', '%(version)s'),
    ('rocminfo', '%(version)s'),
]

default_easyblock = 'CMakeMake'

default_component_specs = {
    'source_urls': ['https://github.com/ROCm/%(name)s/archive/'],
    'sources': [{
        'download_filename': '%(version)s.tar.gz',
        'filename': '%(name)s-%(version)s.tar.gz',
    }],
    'srcdir': '%(name)s-%(version)s',
}

# AMD uses 'gfx' to identify the GPU, the first number identifies the generation, according to
# https://www.x.org/wiki/RadeonFeature/#index5h2 while the rest identifies the specific GPU.
# In the context of EasyBuild this identifier can be thought of as equivalent to the 'sm_<xx>'
# nomenclature of Nvidia.
#local_default_gfx = 'gfx908'

components = [
    ('HIPCC', 'rocm-%s' % _rocm_version, {
        'sources': [{'filename': 'llvm-project-%(version)s.tar.gz', 'alt_location': 'ROCm-LLVM'}],
        'patches': [('HIP-6.3.3_correct_paths_clang_and_rocm_agent_enum.patch',
                     'llvm-project-rocm-%s' % _rocm_version)],
        'checksums': [
            '4df9aba24e574edf23844c0d2d9dda112811db5c2b08c9428604a21b819eb23d',  # llvm-project-rocm-6.3.3.tar.gz
            # HIP-6.3.3_correct_paths_clang_and_rocm_agent_enum.patch
            'ab58ee1bae0b5c4cec293063758da119dd6c90f944e6821141205dfe1bdbb47e',
        ],
        'srcdir': 'llvm-project-rocm-%s/amd/hipcc' % _rocm_version,
    }),
    ('HIP', 'rocm-%s' % _rocm_version, {
        'sources': [
            {
                'source_urls': ['https://github.com/ROCm/clr/archive/'],
                'download_filename': '%(version)s.tar.gz',
                'filename': 'clr-%(version)s.tar.gz',
            },
            {
                'source_urls': ['https://github.com/ROCm/HIP/archive/'],
                'download_filename': '%(version)s.tar.gz',
                'filename': 'HIP-%(version)s.tar.gz',
            },
        ],
        'checksums': [
            '8e5adca8f8c2d99d4a4e49605dd6b56b7881b762ee8ce15b4a7000e3cd982fec',  # clr-rocm-6.3.3.tar.gz
            'aa3a5466304d1dbee0d976b50fccb710dd12e2e1d5534793396447c0ff845e2c',  # HIP-rocm-6.3.3.tar.gz
        ],
        'srcdir': 'clr-rocm-%s' % _rocm_version,
        'configopts': '-DHIP_COMMON_DIR=%(builddir)s/hip-%(version)s/ -DHIP_PLATFORM=amd ' +
                      '-DHIPCC_BIN_DIR=%(installdir)s/bin -DCLR_BUILD_HIP=ON -DCLR_BUILD_OCL=OFF'
    }),
]

#postinstallcmds = [
#    'sed -i "s|ROCM_AGENT_ENUM = .*|ROCM_AGENT_ENUM = \"rocm_agent_enumerator\";|g" %(installdir)s/bin/hipcc.pl',
#]

sanity_check_paths = {
    'files': ['bin/%s' % x for x in ['hipcc', 'hipcc.pl', 'hipconfig', 'hipconfig.pl']] +
             ['bin/%s' % x for x in ['roc-obj', 'roc-obj-extract', 'roc-obj-ls']] +
             ['include/hip/hip_common.h', 'include/hip/hip_runtime.h', 'lib/libamdhip64.%s' % SHLIB_EXT],
    'dirs': [],
}
sanity_check_commands = [
    'hipcc --help',
    'hipconfig --full'
]

modextravars = {
    'HIP_COMPILER': 'clang',
    'HIP_INCLUDE_PATH': '%(installdir)s/include',
    'HIP_LIB_PATH': '%(installdir)s/lib',
    'HIP_PATH': '%(installdir)s',
    'HIP_RUNTIME': 'rocclr',
    'ROCM_PATH': '%(installdir)s',
}

modluafooter = """
setenv("DEVICE_LIB_PATH", os.getenv("EBROOTROCMMINLLVM") .. "/amdgcn/bitcode")
setenv("HIP_CLANG_INCLUDE_PATH", os.getenv("EBROOTROCMMINLLVM") .. "/include")
setenv("HIP_CLANG_PATH", os.getenv("EBROOTROCMMINLLVM") .. "/bin")
setenv("HSA_PATH", os.getenv("EBROOTROCMMINLLVM"))
"""

modtclfooter = """
setenv DEVICE_LIB_PATH $::env(EBROOTROCMMINLLVM)/amdgcn/bitcode
setenv HIP_CLANG_INCLUDE_PATH $::env(EBROOTROCMMINLLVM)/include
setenv HIP_CLANG_PATH $::env(EBROOTROCMMINLLVM)/bin
setenv HSA_PATH $::env(EBROOTROCMMINLLVM)
"""

moduleclass = 'tools'
